{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\coolm\\\\Store\\\\client\\\\src\\\\components\\\\TypeBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport { Context } from \"../index\";\nimport Col from \"react-bootstrap/Col\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { Button } from 'react-bootstrap';\nimport getRandomInt from './NavBar';\nimport Navbar from './NavBar';\nimport { fetchCoints } from '../http/deviceAPI';\nconst TypeBar = observer(_c = _s(() => {\n  _s();\n\n  const {\n    device\n  } = useContext(Context);\n  const {\n    coins\n  } = useContext(Context);\n\n  const onClick = async type => {\n    device.setSelectedType(type);\n    const token = `${localStorage.getItem('token')}`;\n    fetchCoints(jwt_decode(token).id, e.target.name); // coins.setCoins()\n\n    console.log(type.name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ListGroup, {\n    children: device.types.map(type => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      style: {\n        cursor: 'pointer'\n      },\n      active: type.id === device.selectedType.id,\n      onClick: () => {\n        onClick(type);\n      },\n      children: type.name\n    }, type.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}, \"q8YsOwiYBDl6TSPg0/zxHLYwvEs=\"));\n_c2 = TypeBar;\nexport default TypeBar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TypeBar$observer\");\n$RefreshReg$(_c2, \"TypeBar\");","map":{"version":3,"sources":["C:/Users/coolm/Store/client/src/components/TypeBar.js"],"names":["React","useContext","useState","observer","Context","Col","ListGroup","Button","getRandomInt","Navbar","fetchCoints","TypeBar","device","coins","onClick","type","setSelectedType","token","localStorage","getItem","jwt_decode","id","e","target","name","console","log","types","map","cursor","selectedType"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,SAAQC,OAAR,QAAsB,UAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,YAAP,MAAyB,UAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAQA,MAAMC,OAAO,GAAGR,QAAQ,SAAC,MAAM;AAAA;;AAC3B,QAAM;AAACS,IAAAA;AAAD,MAAWX,UAAU,CAACG,OAAD,CAA3B;AACA,QAAM;AAACS,IAAAA;AAAD,MAAUZ,UAAU,CAACG,OAAD,CAA1B;;AACA,QAAMU,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAC5BH,IAAAA,MAAM,CAACI,eAAP,CAAuBD,IAAvB;AACA,UAAME,KAAK,GAAI,GAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B,EAA/C;AACCT,IAAAA,WAAW,CAACU,UAAU,CAACH,KAAD,CAAV,CAAkBI,EAAnB,EAAsBC,CAAC,CAACC,MAAF,CAASC,IAA/B,CAAX,CAH2B,CAK5B;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAI,CAACS,IAAjB;AACH,GAPD;;AAQA,sBACI,QAAC,SAAD;AAAA,cACKZ,MAAM,CAACe,KAAP,CAAaC,GAAb,CAAiBb,IAAI,iBAClB,QAAC,SAAD,CAAW,IAAX;AACI,MAAA,KAAK,EAAE;AAACc,QAAAA,MAAM,EAAE;AAAT,OADX;AAEI,MAAA,MAAM,EAAEd,IAAI,CAACM,EAAL,KAAYT,MAAM,CAACkB,YAAP,CAAoBT,EAF5C;AAGI,MAAA,OAAO,EAAG,MAAI;AACVP,QAAAA,OAAO,CAACC,IAAD,CAAP;AACH,OALL;AAAA,gBAUKA,IAAI,CAACS;AAVV,OAMST,IAAI,CAACM,EANd;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CA/BuB,kCAAxB;MAAMV,O;AAiCN,eAAeA,OAAf","sourcesContent":["import React, {useContext,useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport Col from \"react-bootstrap/Col\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { Button } from 'react-bootstrap';\nimport getRandomInt from './NavBar';\nimport Navbar from './NavBar'\nimport { fetchCoints } from '../http/deviceAPI';\n\n\n\n\n    \n\n\nconst TypeBar = observer(() => {\n    const {device} = useContext(Context)\n    const {coins} = useContext(Context)\n    const onClick = async (type) => {\n        device.setSelectedType(type)\n        const token = `${localStorage.getItem('token')}`\n         fetchCoints(jwt_decode(token).id,e.target.name)\n      \n        // coins.setCoins()\n        console.log(type.name)\n    }\n    return (\n        <ListGroup>\n            {device.types.map(type =>\n                <ListGroup.Item\n                    style={{cursor: 'pointer'}}\n                    active={type.id === device.selectedType.id}\n                    onClick ={()=>{\n                        onClick(type)\n                    }}\n                    key={type.id}\n                    \n\n                >\n                    {type.name}\n                </ListGroup.Item>\n                \n            )}\n        \n        </ListGroup>\n    );\n});\n\nexport default TypeBar;\n"]},"metadata":{},"sourceType":"module"}